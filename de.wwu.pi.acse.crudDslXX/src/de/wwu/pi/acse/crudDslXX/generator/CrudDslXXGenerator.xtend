/*
 * generated by Xtext
 */
package de.wwu.pi.acse.crudDslXX.generator

import de.wwu.pi.acse.crudDslXX.crudDslXX.CrudModel
import de.wwu.pi.acse.crudDslXX.crudDslXX.Entity
import de.wwu.pi.acse.crudDslXX.crudDslXX.EntryPage
import de.wwu.pi.acse.crudDslXX.crudDslXX.ListPage
import de.wwu.pi.acse.crudDslXX.generator.entity.EntityClass
import de.wwu.pi.acse.crudDslXX.generator.service.ServiceBeanGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.beans.CreateBeanGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.beans.DetailsBeanGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.beans.EntityConverterGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.beans.ListBeanGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.pages.CreateViewGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.pages.DetailsViewGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.pages.ListViewGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.pages.MasterPageGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.pages.NavigationGenerator
import de.wwu.pi.acse.crudDslXX.generator.web.pages.WebDescriptionGenerator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension de.wwu.pi.acse.crudDslXX.generator.util.ClassHelper.*
import static extension de.wwu.pi.acse.crudDslXX.generator.util.GUIHelper.*
import static extension de.wwu.pi.acse.crudDslXX.generator.util.PackageHelper.*
import static extension de.wwu.pi.acse.crudDslXX.util.ModelUtil.*

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CrudDslXXGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		resource.allContents.filter(typeof(CrudModel)).forEach [
			System::out.println(" - Generating ...")
			it.doGenerate(fsa)
		]
	}

	def doGenerate(CrudModel model, IFileSystemAccess fsa) {
		System::out.println('Model: ' + model.name)
		
		//Data Layer
		model.allEntities.forEach[processEntity(fsa)]
		model.generatePersistance(fsa,true)
		
		//Business Layer
		model.allEntities.forEach[processService(fsa)]
		
		//View Layer
		model.generateNavigation(fsa)
		model.generateXMLDescriptor(fsa)
		model.allEntities.filter[!composite].forEach[processEntityConverter(fsa)]
		
		model.listPages.forEach[processListPage(fsa)]
		model.entryPages.forEach[processEntryPage(fsa)]
	}

	def processEntity(Entity entity, IFileSystemAccess fsa) {
		System::out.println('Process entity: ' + entity.name)
		fsa.generateFile(
			'''«entity.modelElement.pathEntity»/«entity.entityPackageString.toFolderString»/«entity.entityClassName».java''',
			new EntityClass().generateEntityClass(entity)
		)
	}

	def processService(Entity entity, IFileSystemAccess fsa) {
		if (!entity.isComposite)
			fsa.generateFile(
					'''«entity.modelElement.pathService»/«entity.logicPackageString.toFolderString»/«entity.serviceClassName».java''',
					new ServiceBeanGenerator().generate(entity)
				)
	}

	def generateXMLDescriptor(CrudModel model, IFileSystemAccess fsa) {
		fsa.generateFile('''«model.pathGuiPages»/WEB-INF/web.xml''',
			new WebDescriptionGenerator().generate(model))
	}
	
	def generateNavigation(CrudModel model, IFileSystemAccess fsa) {
		//Generate navigation component and xml descriptors
		fsa.generateFile('''«model.pathGuiPages»/resources/navigation.xhtml''',
			new NavigationGenerator().generate(model))
		fsa.generateFile('''«model.pathGuiPages»/resources/master.xhtml''',
			new MasterPageGenerator().generate(model))
	}

	def processEntityConverter(Entity entity, IFileSystemAccess fsa) {
		fsa.generateFile('''«entity.modelElement.pathGuiBeans»/«entity.guiPackageString.toFolderString»/«entity.converterClassName».java''',
			new EntityConverterGenerator().generate(entity)
		)
	}
	
	def processListPage(ListPage list, IFileSystemAccess fsa) {
		System::out.println('Process list page: ' + list.name)
		fsa.generateFile('''«list.modelElement.pathGuiBeans»/«list.entity.guiPackageString.toFolderString»/«list.listViewClassName».java''',
			new ListBeanGenerator().generate(list)
		)

		fsa.generateFile('''«list.modelElement.pathGuiPages»/«list.entity.urlPath.toFolderString»/«list.listWebpageName».«webpageExtension»''',
			new ListViewGenerator().generate(list)
		)
	}
	
	def processEntryPage(EntryPage list, IFileSystemAccess fsa) {
		System::out.println('Process entry page: ' + list.name)
		fsa.generateFile('''«list.modelElement.pathGuiBeans»/«list.entity.guiPackageString.toFolderString»/«list.createBeanClassName».java''',
			new CreateBeanGenerator().generate(list)
		)

		fsa.generateFile('''«list.modelElement.pathGuiBeans»/«list.entity.guiPackageString.toFolderString»/«list.detailsBeanClassName».java''',
			new DetailsBeanGenerator().generate(list)
		)

		fsa.generateFile('''«list.modelElement.pathGuiPages»/«list.entity.urlPath.toFolderString»/«list.createWebpageName».«webpageExtension»''',
			new CreateViewGenerator().generate(list)
		)
		fsa.generateFile('''«list.modelElement.pathGuiPages»/«list.entity.urlPath.toFolderString»/«list.detailsWebpageName».«webpageExtension»''',
			new DetailsViewGenerator().generate(list)
		)
	}
	
	def static generatePersistance(CrudModel model, IFileSystemAccess fsa, boolean createDrop) {
		val persistenceName = 'PizzaXX' // model.name.split("\\.").last
		val persistenceContent = '''
			<?xml version="1.0" encoding="UTF-8"?>
			<persistence version="2.1"
				xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
				<persistence-unit name="«persistenceName»-Persistence">
					<jta-data-source>java:/«persistenceName»</jta-data-source>
					<class>de.wwu.pi.acse_group06.framework.data.AbstractEntity</class>
					<properties>
						<property name="hibernate.hbm2ddl.auto" value="«if(createDrop) 'create-drop' else 'update'»" />
					</properties>
				</persistence-unit>
			</persistence>
		'''
		fsa.generateFile('''«model.pathEntity»/META-INF/persistence.xml''', persistenceContent)
	}
}
