/*
 * generated by Xtext
 */
package de.wwu.pi.acse.crudDslXX.scoping

import org.eclipse.xtext.scoping.IScope
import de.wwu.pi.acse.crudDslXX.crudDslXX.Entity
import org.eclipse.emf.ecore.EReference
import de.wwu.pi.acse.crudDslXX.crudDslXX.Reference
import org.eclipse.xtext.scoping.Scopes
import de.wwu.pi.acse.crudDslXX.crudDslXX.EntryPage

import static extension de.wwu.pi.acse.crudDslXX.util.ModelUtil.*
import de.wwu.pi.acse.crudDslXX.crudDslXX.ColumnList
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class CrudDslXXScopeProvider extends AbstractDeclarativeScopeProvider {

	def IScope scope_Reference_type(Reference ctx, EReference ref) {
		var result = ctx.getModelElement.allEntities
		// remove the current entity
		result = result.filter[ctx.entity != it]
		Scopes::scopeFor(result.toIterable)
	}

	def IScope scope_Reference_opposite(Reference callingRef, EReference ref) {
		var result = callingRef.type.properties
			//filter for references within the referenced type
			.filter(typeof(Reference))
			//filter for references that match the entity of the calling reference
			.filter[type == callingRef.eContainer]
		Scopes::scopeFor(result)
	}

	//----- Scope provider for GUI rules -----//

	def IScope scope_Page_entity(EntryPage ctx, EReference ref) {
		var Iterable<Entity> result = ctx.getModelElement.entities
		// TODO add composite entities
		Scopes::scopeFor(result)
	}

	// Field: ... 'for' property=[Property]
	def IScope scope_Field_property(EntryPage ctx, EReference ref) {
		val result = ctx.entity.singleValueProperties
		Scopes::scopeFor(result)
	}
	
	// ElemForField: ... 'for' ('for' field=[Field])?
	def IScope scope_ElemForField_field(EntryPage ctx, EReference ref) {
		val result = ctx.allFields
		Scopes::scopeFor(result)
	}

	// EntityList: ... reference=[Reference] ...
	def IScope scope_EntityList_reference(EntryPage ctx, EReference ref) {
		val result = ctx.entity.multiReferences
		Scopes::scopeFor(result)
	}

	// ColumnList: ... (properties+=[Property])+
	def IScope scope_ColumnList_properties(ColumnList ctx, EReference ref) {
		var result = ctx.entityForColumns.singleValueProperties
		Scopes::scopeFor(result)
	}
}
